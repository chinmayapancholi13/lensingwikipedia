Web visualization frontend.

The frontend interfaces with the backend by sending queries in a JSON format. See the backend documentation for details on these queries.

Usage
=====

We assume here the backend is already running and has data. To set up the frontend, first copy config.def.js to config.js and edit it. Most importantly, change backendUrl to be the URL of your backend:
	backendUrl = "http://example.net:1500";
Change any other settings as needed, especially to match the data and the backend's settings. If you do not make your own config.js then the build process will copy config.def.js as it is, and assume that the backend is running locally.

Now use make to run the build process. There are two main targets:
	release -- Build the site with packed and minimized CSS and Javascript files. Outputs to out/.
	devel -- Build the site with independent CSS and Javascript files. Useful for development and debugging. Outputs to devel/.

By default make uses uglifyjs for Javascript minimization and csso for CSS minimization. You can change these by setting by creating a file called config.mk which sets variables MINJS and MINCSS respectively. Alternatively you can set these variables in the environment before calling make. If you don't want to do minimization for one or both components, set the relevant variable(s) to "cat". See the Makefile for details and other settings you can change.

After building, serve the files from either out/ or devel/.

Note that config.js and config.mk are intended to isolate basic settings as much as possible, so that anyone wanting to repeatedly build the website can configure these files once and leave them in place without risk of interference from updates to the source code.

Design notes
============

Query system
------------

Queries to the backend follow the specification in the backend documentation. See queries.js for how the frontend constructs these queries and collects results.

Factoring
---------

Each of the main controls (constraint list, description list, facet, timeline, map) has its own .js file and .css file. The controls are intended to be used flexibly, including possibly using more than one of each control at once. Therefore I have tried to isolate the CSS rules for each control and to avoid using any HTML element IDs that are not certain to be unique.

Control pattern
---------------

My general design pattern for the main controls (constraint list, description list, facet, timeline, map) is something like this:

	function setLoadingIndicator(isLoading) {
		// show a loading indicator if isLoading is set, otherwise hide it
	}
	setLoadingIndicator(true);

	var data1 = null,
	    data2 = null;
	function update() {
		if (data1 != null && data2 != null) {
			setLoadingIndicator(false);
			displayTheData(data1, data2);
		}
	}

	query1.onChange(function () {
		setLoadingIndicator(true);
	});
	query2.onChange(function () {
		setLoadingIndicator(true);
	});

	query1.onResult(function (result) {
		data1 = processData(result);
	});
	query2.onResult(function (result) {
		data2 = processData(result);
	});

Note:
- The loading indicator is shown initially and again whenever the constraints have changed but we have not yet received new results. It gets hidden whenever we have all the results we need.
- The control watches for changes and results on callbacks, sets shared variables as needed, and then calls a function to change the state.
- The main update() function only acts when it has all the data it needs. It takes the data through shared variables instead of arguments because the callbacks that set the data may be called at any time but we want to actually update only when all the data is ready.

I don't know if this is a good design pattern, but it has been working for me so far.
