Files
-----

backend/ -- Backend stuff, including the uploader programs, are in backend.
frontend/ -- Frontend,

Uploading data
--------------

Let's say that the local data is in a file called data.json and we want to put it in a SimpleDB domain called lensingwikipedia-demo-data. First we do the upload:
        upload -d lensingwikipedia-demo-data data.json
The -d option makes upload delete any existing domain with the name and replace it with the new one

Now we need to do the clustering and add the cluster keys to the database. This requires adding fields to the data domain and also storing the basic clustering information in another domain. Let's use lensingwikipedia-demo-data-clusters as the later. We do:
        cluster -d lensingwikipedia-demo-data lensingwikipedia-demo-data-clusters data.json
The -d option makes cluster delete any existing cluster information domain with the name and replace it with the new one. It will never delete the data domain.

You can remove domains and clusterings with removedomain and removeclustering respectively. Do so with caution.

Starting the backend
--------------------

The backend stores its settings in another SimpleDB domain, let's say lensingwikipedia-demo-backend-settings. The only things we need to change from defaults are the name of the data domain and clusters domains:
        backend-ctrl --data_domain_name=lensingwikipedia-demo-data --cluster_domain_name=lensingwikipedia-demo-data-clusters lensingwikipedia-demo-backend-settings
Now we can run the backend:
        backend lensingwikipedia-demo-backend-settings
If you need to change the port, use -p.

Starting the frontend
---------------------

I've been using the frontend locally so far. Just open frontend/index.html as a file in a browser, or serve it locally, eg:
        cd frontend/
        python2 -m SimpleHTTPServer
If you changed the port of the backend or are serving it on a different computer than the frontend, then edit config.js.

Testing queries
---------------

For testing, we can run a query directly against the database (without the backend, but using the same code):
        querydb lensingwikipedia-demo-data query.json
Or we can run a query through the backend:
        querybackend http://localhost:1500 query.json

For example this query will get the first page of descriptions with role "entity_changing":
        {
                "constraints": {
                        "0": {
                                "type": "fieldvalue",
                                "field": "role",
                                "value": "entity_changing"
                        }
                },
                "views": {
                        "0": {
                                "type": "descriptions"
                        }
                }
        }
This one will get counts of all events by role:
        {
                "constraints": {
                },
                "views": {
                        "0": {
                                "type": "countbyfieldvalue",
				"field": "role"
                        }
                }
        }
