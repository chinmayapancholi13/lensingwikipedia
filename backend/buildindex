#!/usr/bin/env python2

"""
Usage: %s [opts] WHOOSH-INDEX-DIR [DATA-FILE]

Arguments:
WHOOSH-INDEX-DIR  Directory of the Whoosh index.
DATA-FILE         Local data file. Uses standard input if not given.

Options:
-v  Verbose output.

Indexes event data from a file or standard input, where each input line is a
Json representation of a event. Creates a Whoosh index for the backend.
"""

import whoosh, whoosh.index, whoosh.fields, whoosh.analysis, whoosh.support.charset
import whooshutils
import os, os.path
import json
import sys
import datetime
import re
import cgi

base_wikipedia_url = "https://en.wikipedia.org"
num_arguments = 6

text_analyzer = whoosh.analysis.RegexTokenizer() | whoosh.analysis.LowercaseFilter() | whoosh.analysis.CharsetFilter(whoosh.support.charset.accent_map) | whoosh.analysis.StopFilter() | whoosh.analysis.StemFilter()
keyword_text_analyzer = whoosh.analysis.RegexTokenizer() | whoosh.analysis.LowercaseFilter() | whoosh.analysis.CharsetFilter(whoosh.support.charset.accent_map)

# The schema describing a document in the index. Any fields that backend queries can access should be mentioned in the protocol description document.
fields = {
  'dbid': whoosh.fields.NUMERIC(stored=True, unique=True),
  'year': whoosh.fields.NUMERIC(stored=True, sortable=True, shift_step=1),
  'eventRoot': whoosh.fields.ID(stored=True),
  'locationText': whoosh.fields.KEYWORD(stored=True, commas=whooshutils.keyword_field_commas),
  'currentCountryText': whoosh.fields.KEYWORD(stored=True, commas=whooshutils.keyword_field_commas),
  'personText': whoosh.fields.KEYWORD(stored=True, commas=whooshutils.keyword_field_commas),
  'categoryText': whoosh.fields.KEYWORD(stored=True, commas=whooshutils.keyword_field_commas),
  'description': whoosh.fields.TEXT(stored=True, analyzer=text_analyzer),
  'descriptionHtml': whoosh.fields.TEXT(stored=True),
  'allPoints': whoosh.fields.KEYWORD(stored=True),
  'role': whoosh.fields.KEYWORD(stored=True, commas=whooshutils.keyword_field_commas)
}
# Fields for all arguments.
for i in range(num_arguments):
  fields['roleA%i' % (i)] = whoosh.fields.ID(stored=True)
# A free text field for each keyword field.
fields.update(dict(("%s%s" % (field_name, whooshutils.keyword_field_free_text_suffix), whoosh.fields.TEXT(stored=True, analyzer=keyword_text_analyzer)) for field_name, field in fields.iteritems() if isinstance(field, whoosh.fields.KEYWORD)))
# A free text field merging all text and keyword fields
fields["all%s" % (whooshutils.keyword_field_free_text_suffix)] = whoosh.fields.TEXT(stored=True, analyzer=text_analyzer)

schema = whoosh.fields.Schema(**fields)

ref_re = re.compile("\[[0-9]+\]")

def make_html_description(event):
  """
  Expand a description to HTML with suitable markup.
  """

  replacements = list(event['wiki_info'].iteritems())
  replacements.sort(key=lambda i: i[1]['span'][0])

  def cleanup(text):
    return cgi.escape(ref_re.sub("", text))

  text = event['description']
  last_end_index = 0
  index_offset = 0
  for item_text, item_info in replacements:
    i, j = item_info['span']
    if i < last_end_index:
      print >> sys.stderr, "warning: span %i:%i \"%s\" overlaps previous span, not making a link" % (i, j, item_text)
      continue
    if 'url' in item_info:
      url = item_info['url']
      link = "<a href=\"%s%s\">%s</a>" % (base_wikipedia_url, url, item_text)
      old_len = len(text)
      text = text[:last_end_index+index_offset] + cleanup(text[last_end_index+index_offset:i+index_offset]) + link + text[j+index_offset:]
      last_end_index = j
      index_offset += len(text) - old_len
  text = text[:last_end_index+index_offset] + cleanup(text[last_end_index+index_offset:])
  return text

def get_points(event):
  def points_from(items):
    return set((float(i['longitude']), float(i['latitude'])) for i in items.itervalues() if 'latitude' in i and 'longitude' in i)
  points = points_from(event['wiki_info'])
  if 'locations' in event:
    points |= points_from(event['locations'])
  return points

def make_event_doc(event):
  """
  Convert a Json event to a document for Whoosh.
  """

  points = get_points(event)
  locationLocationText = set(v['title'] for v in event['locations'].itervalues()) if 'locations' in event else set()
  wikiInfoLocationText = set(v['title'] for v in event['wiki_info'].itervalues() if 'latitude' in v and 'longitude' in v) if 'wiki_info' in event else set()
  doc = {
    'dbid': line_num,
    'year': int(event['year']),
    'eventRoot': unicode(event['eventRoot']),
    'locationText': unicode(whooshutils.join_keywords(locationLocationText | wikiInfoLocationText)),
    'currentCountryText': unicode(whooshutils.join_keywords((v['country'] for (k, v) in event['locations'].iteritems() if 'country' in v) if 'locations' in event else [])),
    'personText': unicode(whooshutils.join_keywords((v['title'] for v in event['person'].itervalues()) if 'person' in event else [])),
    'categoryText': unicode(whooshutils.join_keywords(c for v in (event['wiki_info'].itervalues() if 'wiki_info' else []) if 'category' in v for c in v['category'])),
    'description': unicode(event['description']),
    'descriptionHtml': unicode(make_html_description(event)),
    'allPoints': unicode(whooshutils.join_keywords("%f,%f" % p for p in points))
  }
  all_roles = []
  for role_id in range(num_arguments):
    key = 'roleA%i' % (role_id)
    if key in event:
      doc['roleA%i' % (role_id)] = unicode(event[key])
      all_roles.append(event[key])
  doc['role'] = unicode(whooshutils.join_keywords(all_roles))

  # For searching purposes, copy all keyword field values to matching free text field and merge all text and keyword fields
  fields_to_merge = ['description']
  for field_name, field in schema.items():
    if isinstance(field, whoosh.fields.KEYWORD):
      doc["%s%s" % (field_name, whooshutils.keyword_field_free_text_suffix)] = unicode(whooshutils.merge_field_sep.join(whooshutils.split_keywords(doc[field_name])))
      fields_to_merge.append(field_name)
  doc[whooshutils.all_text_merge_field] = whooshutils.merge_field_sep.join(doc[f] for f in fields_to_merge)

  return doc

if __name__ == '__main__':
  import getopt

  try:
    opts, args = getopt.getopt(sys.argv[1:], "v")
    if len(args) not in [1, 2]:
      raise getopt.GetoptError("wrong number of positional arguments")
    opts = dict(opts)
  except getopt.GetoptError:
    print >> sys.stderr, __doc__.strip('\n\r') % (sys.argv[0])
    sys.exit(1)

  index_path = args[0]
  input_path = args[1] if len(args) > 1 else None
  if not os.path.exists(index_path):
    os.mkdir(index_path)
  index = whoosh.index.create_in(index_path, schema)

  verbose = '-v' in opts

  writer = index.writer()

  input_file = open(input_path) if input_path is not None else sys.stdin
  num_added = 0
  for line_num, line in enumerate(input_file):
    print >> sys.stderr, "%i" % (line_num + 1)
    event_doc = make_event_doc(json.loads(line))
    if verbose:
      print >> sys.stderr, event_doc
    writer.add_document(**event_doc)

  print >> sys.stderr, "committing"
  writer.commit()
