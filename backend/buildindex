#!/usr/bin/env python2

"""
Usage: %s [opts] WHOOSH-INDEX-DIR [DATA-FILE]

Arguments:
WHOOSH-INDEX-DIR  Directory of the Whoosh index.
DATA-FILE         Local data file. Uses standard input if not given.

Options:
-v  Verbose output.

Indexes event data from a file or standard input, where each input line is a
Json representation of a event. Creates a Whoosh index for the backend.
"""

import whoosh, whoosh.index, whoosh.fields, whoosh.analysis, whoosh.support.charset
import whooshutils
import os, os.path
import json
import collections
import sys

# If there is a local configuration file use it, otherwise the defaults.
try:
  import indexing_config
except ImportError:
  import indexing_config_defaults as indexing_config

text_analyzer = whoosh.analysis.RegexTokenizer() | whoosh.analysis.LowercaseFilter() | whoosh.analysis.CharsetFilter(whoosh.support.charset.accent_map) | whoosh.analysis.StopFilter() | whoosh.analysis.StemFilter()
keyword_text_analyzer = whoosh.analysis.RegexTokenizer() | whoosh.analysis.LowercaseFilter() | whoosh.analysis.CharsetFilter(whoosh.support.charset.accent_map)

# The schema describing a document in the index. Any fields that backend queries can access should be mentioned in the protocol description document.
fields = {
  'dbid': whoosh.fields.NUMERIC(stored=True, unique=True),
  'year': whoosh.fields.NUMERIC(stored=True, sortable=True, shift_step=1),
  'eventRoot': whoosh.fields.ID(stored=True),
  'description': whoosh.fields.TEXT(stored=True, analyzer=text_analyzer),
  'allPoints': whoosh.fields.KEYWORD(stored=True),
  'argument': whoosh.fields.KEYWORD(stored=True, commas=whooshutils.keyword_field_commas),
  'role': whoosh.fields.KEYWORD(stored=True, commas=whooshutils.keyword_field_commas)
}
# Fields for all arguments and their roles.
for i in range(indexing_config.num_role_arguments):
  fields['A%i' % (i)] = whoosh.fields.ID(stored=True)
  fields['roleA%i' % (i)] = whoosh.fields.ID(stored=True)
# Extra keyword fields.
for field_name in indexing_config.extra_keyword_field_names:
  if field_name in fields:
    print >> sys.stderr, "warning: duplicate field name '%s'" % (field_name)
  fields[field_name] = whoosh.fields.KEYWORD(stored=True, commas=whooshutils.keyword_field_commas)
# A free text field for each keyword field.
fields.update(dict(("%s%s" % (field_name, whooshutils.keyword_field_free_text_suffix), whoosh.fields.TEXT(stored=True, analyzer=keyword_text_analyzer)) for field_name, field in fields.iteritems() if isinstance(field, whoosh.fields.KEYWORD) or isinstance(field, whoosh.fields.ID)))
# A free text field merging all text and keyword fields
fields["all%s" % (whooshutils.keyword_field_free_text_suffix)] = whoosh.fields.TEXT(stored=True, analyzer=text_analyzer)

schema = whoosh.fields.Schema(**fields)

def make_event_doc(event):
  """
  Convert a Json event to a document for Whoosh.
  """

  # Create a document with values from all the value getters
  doc = { 'dbid': line_num }
  for value_getter in indexing_config.value_getters:
    values = value_getter(event)
    for field_name, value in values.iteritems():
      if field_name in doc:
        print >> sys.stderr, "warning: value already set for field '%s'" % (field_name)
      if isinstance(value, str):
        value = unicode(value)
      elif not isinstance(value, unicode) and isinstance(value, collections.Iterable):
        value = unicode(whooshutils.join_keywords(value))
      doc[field_name] = value

  # For searching purposes, copy all keyword field values to matching free text field and merge all text and keyword fields
  fields_to_merge = ['description']
  for field_name, field in schema.items():
    if (isinstance(field, whoosh.fields.KEYWORD) or isinstance(field, whoosh.fields.ID)) and field_name in doc:
      doc["%s%s" % (field_name, whooshutils.keyword_field_free_text_suffix)] = unicode(whooshutils.merge_field_sep.join(whooshutils.split_keywords(doc[field_name])))
      fields_to_merge.append(field_name)
  doc[whooshutils.all_text_merge_field] = whooshutils.merge_field_sep.join(doc[f] for f in fields_to_merge)

  return doc

if __name__ == '__main__':
  import getopt

  try:
    opts, args = getopt.getopt(sys.argv[1:], "v")
    if len(args) not in [1, 2]:
      raise getopt.GetoptError("wrong number of positional arguments")
    opts = dict(opts)
  except getopt.GetoptError:
    print >> sys.stderr, __doc__.strip('\n\r') % (sys.argv[0])
    sys.exit(1)

  index_path = args[0]
  input_path = args[1] if len(args) > 1 else None
  if not os.path.exists(index_path):
    os.mkdir(index_path)
  index = whoosh.index.create_in(index_path, schema)

  verbose = '-v' in opts

  writer = index.writer()

  input_file = open(input_path) if input_path is not None else sys.stdin
  num_added = 0
  for line_num, line in enumerate(input_file):
    print >> sys.stderr, "%i" % (line_num + 1)
    event_doc = make_event_doc(json.loads(line))
    if verbose:
      print >> sys.stderr, event_doc
    writer.add_document(**event_doc)

  print >> sys.stderr, whooshutils.large_change_commit_message
  writer.commit()
