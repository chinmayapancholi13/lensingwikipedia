#!/usr/bin/env python2

"""
Usage: %s [opts] WHOOSH-INDEX-DIR

Arguments:
WHOOSH-INDEX-DIR  Directory of the Whoosh index.

Options:
-q QUERY       Optional query (in the python object format) to search for,
  instead of showing all documents.
-l NUM         Limit on number of documents to show.
-t SECONDS     Time limit before stopping the search.
-c FIELD-NAME  Name of field to count on.
-s FIELD-NAME  Name of field to sort on.
-r             Reverse sort order.

Prints documents in an index. All documents in the index are shown unless the
result is otherwise constrained by the options.

This is a debugging tool, not part of the main toolchain.
"""

import whoosh, whoosh.index, whoosh.query, whoosh.sorting, whoosh.collectors
import sys
from whoosh.query import *

def parse_query(text):
  return eval(text)

if __name__ == '__main__':
  import getopt

  try:
    opts, args = getopt.getopt(sys.argv[1:], "q:l:c:s:rt:")
    if len(args) != 1:
      raise getopt.GetoptError("wrong number of positional arguments")
    opts = dict(opts)
  except getopt.GetoptError:
    print >> sys.stderr, __doc__.strip('\n\r') % (sys.argv[0])
    sys.exit(1)

  index = whoosh.index.open_dir(args[0])
  query = parse_query(opts['-q']) if '-q' in opts else whoosh.query.Every()
  limit = int(opts['-l']) if '-l' in opts else None
  count_on_field = opts['-c'] if '-c' in opts else None
  sort_by_field = opts['-s'] if '-s' in opts else None
  reverse_sort = '-r' in opts
  time_limit = float(opts['-t']) if '-t' in opts else None

  collector_opts = { 'limit': limit }
  if count_on_field is not None:
    collector_opts['groupedby'] = whoosh.sorting.FieldFacet(count_on_field, maptype=whoosh.sorting.Count)
  if sort_by_field is not None:
    collector_opts['sortedby'] = sort_by_field
    collector_opts['reverse'] = reverse_sort

  with index.searcher() as searcher:
    collector = searcher.collector(**collector_opts)
    if time_limit is not None:
      collector = whoosh.collectors.TimeLimitCollector(collector, time_limit)

    try:
      searcher.search_with_collector(query, collector)
    except whoosh.collectors.TimeLimit:
      print >> sys.stderr, "search timed out"
    results = collector.results()

    print >> sys.stderr, results
    if count_on_field is None:
      for hit in results:
        print hit.fields()
    else:
      for key, value in results.groups().iteritems():
        print key, value
