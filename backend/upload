#!/usr/bin/env python2

"""
Usage: %s [opts] DATA-DOMAIN [DATA-FILE]

Arguments:
DATA-DOMAIN   SimpleDB domain to upload the data to.
DATA-FILE     Local data file. Uses standard input if not given.

Options:
  -d      Delete and replace the existing domain, if there is one.
  -a      Add to an existing domain. Event items with the same index are
    replaced, and event items with new indices are added.
  -i INT  Event ID index offset.
  -y INTS Range of valid years (negatives being BCE dates) for padding year
    values. Colon separated.

Uploads events from local data to a SimpleDB database.

Events are identified with sequential indices. Be careful to get them right if
doing multiple uploads to the same domain without deleting or clearing it first.
"""

import sys
import json
import cgi
import re
import boto
import dates

max_sdb_value_len = 1000 # should be 1024 - 1 (for the ellipsis) but seems to need some padding
base_wikipedia_url = "https://en.wikipedia.org"

ref_re = re.compile("\[[0-9]+\]")
def make_html_description(event):
  replacements = list(event['wiki_info'].iteritems())
  replacements.sort(key=lambda i: i[1]['span'][0])

  def cleanup(text):
    return cgi.escape(ref_re.sub("", text))

  text = event['description']
  last_end_index = 0
  index_offset = 0
  for item_text, item_info in replacements:
    i, j = item_info['span']
    if i < last_end_index:
      print >> sys.stderr, "warning: span %i:%i \"%s\" overlaps previous span, not making a link" % (i, j, item_text)
      continue
    if 'url' in item_info:
      url = item_info['url']
      link = "<a href=\"%s%s\">%s</a>" % (base_wikipedia_url, url, item_text)
      old_len = len(text)
      text = text[:last_end_index+index_offset] + cleanup(text[last_end_index+index_offset:i+index_offset]) + link + text[j+index_offset:]
      last_end_index = j
      index_offset += len(text) - old_len
  text = text[:last_end_index+index_offset] + cleanup(text[last_end_index+index_offset:])
  return text

def make_location_list(event):
  wiki_locs = set(ii['title'] for ii in event['wiki_info'].itervalues() if 'latitude' in ii and 'longitude' in ii)
  other_locs = set(ii['title'] for ii in event['locations'].itervalues()) if 'locations' in event else set()
  return list(wiki_locs | other_locs)

def make_country_list(event):
  wiki_countries = set(ii['country'] for it, ii in event['wiki_info'].iteritems() if 'country' in ii)
  other_countries = set(ii['country'] for it, ii in event['locations'].iteritems() if 'country' in ii) if 'locations' in event else set()
  return list(wiki_countries | other_countries)

def format_location(item):
  item_text, item_info = item
  i, j = item_info.get('span') or ['.', '.']
  latitude = str(item_info['latitude']) if 'latitude' in item_info else '.'
  longitude = str(item_info['longitude']) if 'longitude' in item_info else '.'
  return "%s %s %i %i %s" % (latitude, longitude, i, j, item_text)

def format_wiki_info_item(item):
  item_text, item_info = item
  i, j = item_info.get('span') or ['.', '.']
  latitude = str(item_info['latitude']) if 'latitude' in item_info else '.'
  longitude = str(item_info['longitude']) if 'longitude' in item_info else '.'
  return "%s %s %s %i %i %s" % (item_info['url'], latitude, longitude, i, j, item_text)

def format_person(item):
  item_text, info = item
  span = info['span']
  return "%i %i %s" % (span[0], span[1], item_text)

def clip_html(html, max_len):
  """
  Clips text to a maximum length while making sure not to leave invalid HTML tags.
  """
  if len(html) <= max_len:
    return html
  else:
    html = html[:max_len]
    i = html.rfind("<")
    j = html.rfind("</a>")
    k = html.rfind("<a ")
    if i > 0 and i != j:
      if i < 0 and k < 0:
        html = html[:i]
      else:
        html = html[:max(j, k)]
    html += "&hellip;"
    return html

def clip_field(event, field, html=False):
  text = event[field]
  if len(text) > max_sdb_value_len:
    event[field] = clip_html(text, max_sdb_value_len) if html else text[:max_sdb_value_len]

def prepare_event(event, min_year, year_key_digits):
  """
  Modifies an event for uploading.
  """

  # Remove stuff we can't handle right now
  del event['html_fragment']

  # Pre-format description.
  event['descriptionHtml'] = make_html_description(event)

  # Make flat lists of the needed parts of structured data. These should probably be lists of unique items for sensible queries.
  event['locationText'] = make_location_list(event)
  event['currentCountryText'] = make_country_list(event)
  if 'person' in event:
    event['personText'] = list(set(ii['title'] for ii in event['person'].itervalues()))

  # Reformat structured data to lists of strings.
  if 'locations' in event:
    event['locations'] = [format_location(p) for p in event['locations'].iteritems()]
  event['wiki_info'] = [format_wiki_info_item(p) for p in event['wiki_info'].iteritems()]
  if 'person' in event:
    event['person'] = [format_person(p) for p in event['person'].iteritems()]

  # Clip text fields to length.
  clip_field(event, 'description')
  clip_field(event, 'descriptionTokenized')
  clip_field(event, 'descriptionHtml', html=True)

  # Add key for numeric sorting.
  event['yearKey'] = dates.year_key(int(event['year']), min_year, year_key_digits)

def upload(input, dom_name, first_id, min_year, max_year, do_delete):
  sdb = boto.connect_sdb()

  year_key_digits = len(str(max_year - min_year))

  dom = None
  if do_delete:
    try:
      sdb.delete_domain(dom_name)
      print >> sys.stderr, "removing existing domain"
    except boto.exception.SDBResponseError:
      print >> sys.stderr, "no existing domain"
  else:
    try:
      dom = sdb.get_domain(dom_name)
      if do_add:
        print >> sys.stderr, "adding to existing domain"
      else:
        print >> sys.stderr, "domain already exists"
        sys.exit(1)
    except boto.exception.SDBResponseError:
      pass
  if dom is None:
    print >> sys.stderr, "creating new domain"
    dom = sdb.create_domain(dom_name)

  for i, line in enumerate(input, first_id):
    event = json.loads(line)
    print >> sys.stderr, "uploading event %i" % (i)
    prepare_event(event, min_year, year_key_digits)
    dom.put_attributes(str(i), event)

if __name__ == '__main__':
  import getopt

  try:
    opts, args = getopt.getopt(sys.argv[1:], "i:day:")
    if len(args) not in [1, 2]:
      raise getopt.GetoptError("wrong number of positional arguments")
    opts = dict(opts)
  except getopt.GetoptError:
    print >> sys.stderr, __doc__.strip('\n\r') % (sys.argv[0])
    sys.exit(1)

  first_id = int(opts['-i']) if '-i' in opts else 0
  do_delete = '-d' in opts
  do_add = '-a' in opts
  min_year, max_year = [int(y) for y in opts['-y'].split(':')] if '-y' in opts else (-1000000, 1000000)
  dom_name = args[0]
  input = open(args[1]) if len(args) > 1 else sys.stdin
  upload(input, dom_name, first_id, min_year, max_year, do_delete)
