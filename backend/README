This is incomplete work on a new backend using Whoosh. Currently the query system is complete (but not fully tested) but the server is not available.

Usage
=====

First create the initial index from the Json data.

	./buildindex index.raw < /path/to/data.json

Next cluster the events. This creates a new copy of the index with the reference points added. The duplication of the index files is because it isn't easy to modify documents in-place in an index. Later we may wish to find a better way to do this, or to merge the clustering into buildindex.

	./cluster index.raw index

You can examine the index for debugging purposes with the lsindex program. Here we look at the first ten events sorted by year with the more recent year first. The program can do various other things including filter by a Whoosh query; see the options for more information.

	./lsindex -l 10 -s year index

We can run a query directly against the index for debugging.

	./querydb index examplequeries/constraints/fieldvalue.json

We can start the backend server with the index.

	./backend -i index

For a live server we would also (or instead) want to give a settings file with -c so that settings can be changed without restarting the server. See default_settings.py for the format of the settings file. The settings file is reloaded periodically at intervals specified by one of the settings. If the settings file cannot be parsed at a reload, then the backend continues to use the previous settings. For a live server there should probably be one settings file per instance so that these values can be changed independently if needed. If the index directory path is changed or the index is modified, the backend will reset and clear its caches. This can be forced after any settings reload with the always_reset setting, but there is no obvious reason to do so. The -i command line option sets a default value for the index path which will be overridden by any given in the settings file.

	./backend -c mybackendinstance.conf -i index

With the backend server running we can send it a Json query for debugging.

	./querybackend http://127.0.0.1:1500 examplequeries/constraints/fieldvalue.json
