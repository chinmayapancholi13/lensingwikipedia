This is the protocol supported by the backend.

Queries format
==============

A query is a JSON object with the following format:
	{
		"constraints": /* dictionary of constraints keyed by ID */,
		"views": /* dictionary of views keyed by ID */
	}

A response is a dictionary of results keyed by view ID. The value for each ID is the result for the corresponding view. Each result is a JSON structure, with the details depending on the view. The results are based only on the events in the data which match all of the constraints.

Years are given as integers, where negative indicates BCE and positive indicates CE.

Some view types are paginated (see the code and the design notes below for details) or can optionally be paginated. These views have a page attribute which sets the page number, starting from zero. The number of items per page is determined by the backend. The result contains details for this number of events, or as many are available to match the constraints if less than a full page is available. The result also has a "more" attribute indicating whether more pages are available. Submitting a query with the same constraints and the same view except for a changed page number will fetch subsequent pages. If a view type is strictly paginated then it will assume a page number of zero if no page number is given. If it is optionally paginated it will paginate only if a page number is given, and otherwise will return all possible results. If a page number past the last page is requested then the result will be properly structured and have the "more" attribute set to false, but the contents are otherwise undefined.

Any view result can have an error; see below.

See examplequeries/ for examples.

Constraints
===========

For details see queries.py, especially constraint_to_sdb_query().

### Constrain to events where a field has a particular value:
	{
		"type": "fieldvalue",
		"field": /* name of field to match */,
		"value": /* value for the field to match */
	}

### Constrain to events in an time range (inclusive):
	{
		"type": "timerange",
		"low": /* lower bound year (inclusive, and see year format above) */,
		"high": /* upper bound year (inclusive, and see year format above) */
	}

### Constrain to events in particular reference points:
	{
		"type": "referencepoints",
		"points": /* list of reference points to match */
	}

Views and results
=================

For details see queries.py, especially generate_views().

### Get counts of events by value of a particular field:
	{
		"type": "countbyfieldvalue",
		"field": /* name of field to count on */,
		"page": /* optional; page number, defaults to 0 if not given */
	}
result:
	{
		"counts": /* dictionary of count pairs, each of which is a value and an integer count */,
		"more": /* boolean flag indicating if there are more pages available */
	}
This view is always paginated.

### Get counts of events by map reference point:
	{
		"type": "countbyreferencepoint",
		"page": /* optional; page number, no pagination if not given */
	}
result:
	{
		"counts": /* dictionary of count pairs, each of which is a value and an integer count */,
		"more": /* boolean flag indicating if there are more pages available, set only if pagination is enabled */
	}
This view is optionally paginated.

### Get counts of events by year:
	{
		"type": "countbyyear",
		"page": /* optional; page number, no pagination if not given */
	}
result:
	{
		"counts": /* dictionary of count pairs, each of which is a value and an integer count */,
		"more": /* boolean flag indicating if there are more pages available, set only if pagination is enabled */
	}
This view is optionally paginated.

### Get descriptive details of events:
	{
		"type": "descriptions",
		"page": /* optional; page number, defaults to 0 if not given */
	}
result:
	{
		"descriptions": /* list of event details */,
		"more": /* boolean flag indicating if there are more pages available for this view */
	}
where each element corresponds to a particular event and has the format:
	{
		"year": /* year (see year format above) */,
		"descriptionHtml": /* HTML-formatted description */
	}
This view is always paginated.

Errors
======

Any view result can be replaced by an error if an error occurred when handling that view. The error could be intended if the backend refuses to handle a certain constraint, or could indicate an internal backend error. An error result has the format:
	{
		"error": /* true boolean error message string */
	}
The value of the error attribute is either a boolean true value if there is no specific error message, or a string containing a specific error message.
