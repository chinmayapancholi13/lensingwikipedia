#!/usr/bin/env python2

"""
Usage: %s [opts] INPUT-WHOOSH-INDEX-DIR OUTPUT-WHOOSH-INDEX-DIR

Arguments:
INPUT-WHOOSH-INDEX-DIR  Directory of the Whoosh index for the input data.
OUTPUT-WHOOSH-INDEX-DIR  Directory of the Whoosh index for the output data.

Options:
  -t FLOAT  Distance threshold for choosing when to start new clusters.
  -D        Do dummy clustering; find cluster sizes and centres but don't
    actually output a new index.

Creates reference points for events by clustering them in geographic spherical
coordinates. The clustering is greedy and sensitive to input order. The output
index will have the same schema and documents as the input index except for the
added field for reference points.
"""

import sys
import os, os.path
import whoosh, whoosh.index
import whooshutils

class Cluster:
  def __init__(self):
    self.centre = [0.0, 0.0]
    self.count = 0

def geo_cluster(events, threshold, assign_event_to_clusters):
  """
  Raviish clustering on geographic (spherical coordinate) points.
  """

  from math import atan2, sqrt, sin, cos, pi
  deg_to_rad = pi / 180.0

  def dist(a, b):
    # Vincenty formula, following the d3 implementation.
    dl = (b[0] - a[0]) * deg_to_rad
    p0, p1 = a[1] * deg_to_rad, b[1] * deg_to_rad
    sin_dl, cos_dl = sin(dl), cos(dl)
    sin_p0, cos_p0 = sin(p0), cos(p0)
    sin_p1, cos_p1 = sin(p1), cos(p1)
    return atan2(sqrt((cos_p1 * sin_dl)**2 + (cos_p0 * sin_p1 - sin_p0 * cos_p1 * cos_dl)**2), sin_p0 * sin_p1 + cos_p0 * cos_p1 * cos_dl)

  def updateAvgGeoPoint(avg, sample, count):
    """
    Update a running average of geo points, compensating for the fact that they
    may wrap around the antimeridian.
    """
    if count > 0:
      lon_changes = [0.0, 360.0, -360.0]
      lon = sample[0] + min(lon_changes, key=lambda dl: abs(sample[0] + dl - avg[0]))
      sample = (lon, sample[1])
      for i in range(2):
        avg[i] = (avg[i] * (count - 1) + sample[i]) / count
    else:
      for i in range(2):
        avg[i] = sample[i]
    if avg[0] > 180:
      avg[0] -= 360.0
    elif avg[0] < -1280:
      avg[0] += 360.0

  clusters = []
  event_clusters = {}

  for i, (event, points) in enumerate(events):
    print >> sys.stderr, "clustering event number %i" % (i)

    for point in points:
      closest = None
      closest_dist = float('inf')
      for cluster in clusters:
        cluster_dist = dist(point, cluster.centre)
        if cluster_dist < closest_dist:
          closest = cluster
          closest_dist = cluster_dist

      if closest_dist > threshold:
        closest = Cluster()
        clusters.append(closest)

      event_clusters.setdefault(event, set())
      if closest not in event_clusters[event]:
        event_clusters[event].add(closest)
        closest.count += 1
      updateAvgGeoPoint(closest.centre, point, closest.count)

  for event, clusters_for_event in event_clusters.iteritems():
    assign_event_to_clusters(event, clusters_for_event)

  return clusters

def iter_events_from_file(input, first_id):
  def get_points(event):
    def points_from(items):
      return set((float(i['longitude']), float(i['latitude'])) for i in items.itervalues() if 'latitude' in i and 'longitude' in i)
    points = points_from(event['wiki_info'])
    if 'locations' in event:
      points |= points_from(event['locations'])
    return points
  import json
  for id, line in enumerate(input, first_id):
    event = json.loads(line)
    points = get_points(event)
    if len(points) > 0:
      yield id, points

def iter_events_from_index(index):
  with index.searcher() as searcher:
    for hit in searcher.search(whoosh.query.Every(), limit=None):
      points_val = hit['allPoints']
      points = [tuple(float(x) for x in t.split(",")) for t in whooshutils.split_keywords(points_val)] if len(points_val) > 0 else []
      if len(points) > 0:
        yield hit['dbid'], points

def run(input_index, output_index, threshold, do_dummy):
  lookup = {}
  def assign_event_to_clusters(event_id, clusters):
    lookup[event_id] = clusters
  clusters = geo_cluster(iter_events_from_index(input_index), threshold, assign_event_to_clusters)

  for i, cluster in enumerate(clusters):
    print >> sys.stderr, "cluster %i: %f,%f %i" % (i, cluster.centre[0], cluster.centre[1], cluster.count)

  if not do_dummy:
    writer = output_index.writer()
    try:
      writer.add_field('referencePoints', whoosh.fields.KEYWORD(stored=True, commas=whooshutils.keyword_field_commas))
    except whoosh.fields.FieldConfigurationError:
      pass
    with input_index.searcher() as searcher:
      for hit in searcher.search(whoosh.query.Every(), limit=None):
        point_vals = ["%f,%f" % (c.centre[0], c.centre[1]) for c in lookup[hit['dbid']]] if hit['dbid'] in lookup else []
        event = dict(hit)
        print >> sys.stderr, "event %i: %s" % (hit['dbid'], ' '.join(point_vals))
        event['referencePoints'] = unicode(whooshutils.join_keywords(point_vals))
        writer.add_document(**event)
    print >> sys.stderr, "committing"
    writer.commit()

if __name__ == '__main__':
  import getopt

  try:
    opts, args = getopt.getopt(sys.argv[1:], "t:D")
    if len(args) != 2:
      raise getopt.GetoptError("wrong number of positional arguments")
    opts = dict(opts)
  except getopt.GetoptError:
    print >> sys.stderr, __doc__.strip('\n\r') % (sys.argv[0])
    sys.exit(1)

  input_index_path = args[0]
  output_index_path = args[1]
  threshold = float(opts['-t']) if '-t' in opts else 0.25
  do_dummy = '-D' in opts

  if not os.path.exists(output_index_path):
    os.mkdir(output_index_path)
  input_index = whoosh.index.open_dir(input_index_path)
  output_index = whoosh.index.create_in(output_index_path, input_index.schema.copy()) if not do_dummy else None
  run(input_index, output_index, threshold, do_dummy)
