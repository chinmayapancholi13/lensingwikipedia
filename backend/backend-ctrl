#!/usr/bin/env python2

"""
Usage: %s [opts] SETTINGS-DOMAIN

Arguments:
SETTINGS-DOMAIN SimpleDB domain to read/write settings from/to.

Options:
-o  Outputs the current settings.
-a  Show all settings including ones that aren't set in the database.
-i  Inputs settings from standard input in the same format used for output.
--SETTING=  Sets the value of setting SETTING.

Controls the settings of the backend, which are stored in the database. First
shows the current settings if requested. Then loads and applies settings from
standard input if requested. Finally, loads and applies any settings given as
long options on the command line.

The format for input files is the same as the output format. Any settings given
an empty value (either from file input or on the command line) will be removed
from the database; the backend will use its own default in this case.
"""

import sys
import boto
import sdbutils
import backend_settings

def update_settings_from_opts(settings, opts):
  for opt, value in opts.iteritems():
    setting = opt.strip('-')
    if setting in backend_settings.parse_settings:
      if value is not None and value.strip() != "":
        value = backend_settings.parse_settings[setting](value)
      else:
        value = None
      setattr(settings, setting, value)

if __name__ == '__main__':
  import getopt

  try:
    opts, args = getopt.getopt(sys.argv[1:], "ioa", ["%s=" % (a) for a in backend_settings.parse_settings])
    if len(args) not in [1]:
      raise getopt.GetoptError("wrong number of positional arguments")
    opts = dict(opts)
  except getopt.GetoptError:
    print >> sys.stderr, __doc__.strip('\n\r') % (sys.argv[0])
    sys.exit(1)

  settings_dom_name = args[0]
  show_all = '-a' in opts

  sdb = boto.connect_sdb()
  settings_dom = sdbutils.get_maybenew_domain(sdb, settings_dom_name)

  if '-o' in opts:
    backend_settings.show_from_db(settings_dom, show_all=show_all)
  settings = backend_settings.Settings()
  if '-i' in opts:
    backend_settings.update_settings_from_file(settings, sys.stdin)
  update_settings_from_opts(settings, opts)
  backend_settings.update_db_from_settings(settings_dom, settings)
