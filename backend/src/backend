#!/usr/bin/env python2

"""
Runs the backend as a server.

To see the available options, use --help
"""

import sys
import logging
import whoosh
import whoosh.index
import queries

import click

from werkzeug.wrappers import Request as RequestBase
from werkzeug.wrappers import Response
from werkzeug.contrib.wrappers import JSONRequestMixin
from werkzeug.contrib.cache import RedisCache

try:
    import simplejson as json
except ImportError:
    import json

# import backend_settings
# import backend_settings_defaults
# handles which domain to choose based on environment variables internally
from domain_config import backend_domain_settings_defaults

logging.basicConfig(stream=sys.stdout,
                    level=logging.DEBUG)


class Request(RequestBase, JSONRequestMixin):
    pass


def create_app(index, redis_address, redis_port):
    """ Creates an app, given an index path."""
    whoosh_index = whoosh.index.open_dir(index)
    cache = RedisCache(redis_address, port=redis_port, default_timeout=0,
                       key_prefix="query_cache")
    querier = queries.Querier(whoosh_index, cache,
                              **backend_domain_settings_defaults.settings.get('querier', {})) # noqa

    querier.prime()

    @Request.application
    def application(request):
        whoosh_index = whoosh.index.open_dir(index)
        querier = queries.Querier(whoosh_index, cache,
                                  **backend_domain_settings_defaults.settings.get('querier', {})) # noqa

        try:
            # TODO: better way of doing this (e.g. make request.json work)
            # query = request.json
            query = json.loads(request.form.items()[0][0])
        except Exception, e:
            logging.warn(e)
            return Response('{ "status": "error", "message": "invalid json" }',
                            mimetype='application/json', status=400)

        query_response = querier.handle(query)

        response = Response(json.dumps(query_response),
                            mimetype='application/json')
        response.headers.add('Access-Control-Allow-Origin', '*')

        return response

    return application


@click.command()
@click.option('--hostname', default="0.0.0.0",
              help="the hostname to bind to")
@click.option('-p', '--port', default=1500, type=int,
              help="the port to bind to")
@click.option('-r', '--redis', default="localhost:6379",
              help="address of the Redis server.")
@click.argument('index', type=click.Path(exists=True))
def main(hostname, port, index, redis):
    from werkzeug.serving import run_simple

    # add default redis port to the end in case it's not already there
    # if it's already there, it's going to be ignored, so it's not an issue
    redis_host = (redis + ":6379").split(":")
    redis_address = redis_host[0]
    redis_port = int(redis_host[1])

    app = create_app(index, redis_address, redis_port)
    run_simple(hostname, port, app, threaded=False)

if __name__ == '__main__':
    main()
