#!/usr/bin/env python2

"""
Runs the backend as a server.

To see the available options, use --help
"""

import sys
import os
import logging
import whoosh
import whoosh.index
import queries

import click

from werkzeug.wrappers import BaseRequest
from werkzeug.wrappers import Response
from werkzeug.exceptions import BadRequest
from werkzeug.utils import cached_property
from werkzeug.contrib.cache import RedisCache

try:
    import simplejson as json
except ImportError:
    import json

# import backend_settings
# import backend_settings_defaults
# handles which domain to choose based on environment variables internally
from domain_config import backend_domain_settings_defaults

logging.basicConfig(stream=sys.stdout,
                    level=logging.DEBUG)


# TODO: try to use JSONRequestMixin
#       It currently doens't work because we're getting the json in request.form
#       not in request.data
class QueryRequest(BaseRequest):
    # we shouldn't get a query that's more than 2M
    max_content_length = 2 * 1024 * 1024

    @cached_property
    def json(self):
        try:
            return json.loads(self.form.items()[0][0])
        except ValueError:
            # Let the user deal with the exception and respond with an
            # appropriate error message.
            # We're using BadRequest here to be consistent with the other
            # request wrappers provided by werkzeug.
            raise BadRequest("Invalid json")


def create_app(index, redis_address, redis_port):
    """ Creates an app, given an index path."""
    try:
        whoosh_index = whoosh.index.open_dir(index)
    except whoosh.index.EmptyIndexError:
        logging.error("No index found at {}".format(index))
        sys.exit(1)
    cache = RedisCache(redis_address, port=redis_port, default_timeout=0,
                       key_prefix="query_cache")
    querier = queries.Querier(whoosh_index, cache,
                              **backend_domain_settings_defaults.settings.get('querier', {})) # noqa

    querier.prime()

    @QueryRequest.application
    def application(request):
        querier = queries.Querier(whoosh_index, cache,
                                  **backend_domain_settings_defaults.settings.get('querier', {})) # noqa

        try:
            query = request.json
        except BadRequest, e:
            logging.warn(e)
            return Response('{ "status": "error", "message": "invalid json" }',
                            mimetype='application/json', status=400)

        query_response = querier.handle(query)

        response = Response(json.dumps(query_response),
                            mimetype='application/json')
        response.headers.add('Access-Control-Allow-Origin', '*')

        return response

    return application


@click.command()
@click.option('--hostname', default="0.0.0.0",
              help="the hostname to bind to")
@click.option('-p', '--port', default=1500, type=int,
              help="the port to bind to")
@click.option('-r', '--redis', default="localhost:6379",
              help="address of the Redis server.")
@click.argument('index', type=click.Path(exists=True))
def main(hostname, port, index, redis):
    from werkzeug.serving import run_simple

    # add default redis port to the end in case it's not already there
    # if it's already there, it's going to be ignored, so it's not an issue
    redis_host = (redis + ":6379").split(":")
    redis_address = redis_host[0]
    redis_port = int(redis_host[1])

    app = create_app(index, redis_address, redis_port)
    # XXX: Make sure threaded=False since Whoosh isn't as threadsafe as it
    # should be. You'll get the following issue:
    # https://bitbucket.org/mchaput/whoosh/issues/400/runtimeerror-dictionary-changed-size
    run_simple(hostname, port, app, threaded=False)

if __name__ == '__main__':
    main()
# this env variable is set in our uWSGI config
elif os.environ.get("RUNNING_IN_UWSGI", False):
    logging.debug("RUNNING_IN_UWSGI")
    # TODO change this to an env variable once docker-compose supports
    # build-time env vars
    INDEX_PATH = "/data/index/fullData.index"

    app = create_app(INDEX_PATH, 'redis', '6379')
