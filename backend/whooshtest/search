#!/usr/bin/env python2

"""
Usage: %s [opts] INDEX-DIR QUERY

Options:
-t TIMEOUT      Timeout before ending the search, in seconds.
-l MAX-RESULTS  Limit on number of results.
-y              Sort results by year.

Finds and prints events matching a query QUERY. Optionally can limit the search
by time or number of results. Optionally sorts results by year.
"""

import whoosh, whoosh.index, whoosh.fields, whoosh.qparser, whoosh.collectors
import sys
from whoosh.query import *

def parse_query(text):
  return eval(text)

if __name__ == '__main__':
  import getopt

  try:
    opts, args = getopt.getopt(sys.argv[1:], "t:l:y")
    if len(args) != 2:
      raise getopt.GetoptError("wrong number of positional arguments")
    opts = dict(opts)
  except getopt.GetoptError:
    print >> sys.stderr, __doc__.strip('\n\r') % (sys.argv[0])
    sys.exit(1)

  timeout = int(opts['-t']) if '-t' in opts else None
  max_results = int(opts['-l']) if '-l' in opts else None
  sort_by_year = '-y' in opts

  index = whoosh.index.open_dir(args[0])
  query = parse_query(args[1])

  collector_opts = {}
  if max_results is not None:
    collector_opts['limit'] = max_results
  if sort_by_year:
    collector_opts['sortedby'] = 'year'

  with index.searcher() as searcher:
    results = searcher.search(query)

    collector = searcher.collector(**collector_opts)
    if timeout is not None:
      collector = whoosh.collectors.TimeLimitCollector(collector, timeout)

    try:
      searcher.search_with_collector(query, collector)
    except whoosh.collectors.TimeLimit:
      print >> sys.stderr, "search timed out"
    results = collector.results()

    print >> sys.stderr, results
    for result in results:
      print result
