#!/usr/bin/env python2

"""
Usage: %s INDEX-DIR

Creates a new index from Json data given on standard input. INDEX-DIR gives the
directory to use as index storage. Remove any existing directory with the same
name if you want to ensure a fresh index; I'm not sure how much it reuses
otherwise.
"""

import whoosh, whoosh.index, whoosh.fields
import os, os.path
import json
import sys
import datetime

schema = whoosh.fields.Schema(
    year=whoosh.fields.NUMERIC(stored=True, sortable=True, shift_step=1),
    rolea0=whoosh.fields.ID(stored=True),
    rolea1=whoosh.fields.ID(stored=True),
    rolea2=whoosh.fields.ID(stored=True),
    rolea3=whoosh.fields.ID(stored=True),
    persons=whoosh.fields.KEYWORD(stored=True, commas=True),
    locations=whoosh.fields.KEYWORD(stored=True, commas=True),
    currentcountries=whoosh.fields.KEYWORD(stored=True, commas=True),
    description=whoosh.fields.TEXT(stored=True)
  )

if __name__ == '__main__':
  import getopt

  try:
    opts, args = getopt.getopt(sys.argv[1:], "v")
    if len(args) != 1:
      raise getopt.GetoptError("wrong number of positional arguments")
    opts = dict(opts)
  except getopt.GetoptError:
    print >> sys.stderr, __doc__.strip('\n\r') % (sys.argv[0])
    sys.exit(1)

  index_path = args[0]
  if not os.path.exists(index_path):
    os.mkdir(index_path)
  index = whoosh.index.create_in(index_path, schema)

  verbose = '-v' in opts

  writer = index.writer()

  input_file = sys.stdin
  num_added = 0
  for line_num, line in enumerate(input_file):
    print >> sys.stderr, "%i" % (line_num + 1)
    event = json.loads(line)
    event_doc = {
      'year': int(event['year']),
      'persons': unicode(", ".join(v['title'] for v in event['person'].itervalues()) if 'person' in event else ""),
      'locations': unicode(", ".join(v['title'] for v in event['locations'].itervalues()) if 'locations' in event else ""),
      'currentcountries': unicode(", ".join(v['country'] for (k, v) in event['locations'].iteritems() if 'country' in v) if 'locations' in event else ""),
      'description': unicode(event['description'])
    }
    for role_id in range(4):
      key = 'roleA%i' % (role_id)
      if key in event:
        event_doc['rolea%i' % (role_id)] = unicode(event[key])
    if verbose:
      print >> sys.stderr, event_doc
    writer.add_document(**event_doc)

  print >> sys.stderr, "committing"
  writer.commit()
