#!/usr/bin/env python2

"""
Usage: %s [opts] INDEX-DIR

Options:
-r NUM-REPS  Number of repetitions for query test.

Takes a list of queries (in python object format) from standard input, one on
each line. If the line has a prefix of the form ":fieldname" then counting is
done on that field name. There is no limiting, sorting, or output of results.
"""

import whoosh, whoosh.index, whoosh.fields, whoosh.qparser, whoosh.collectors
import sys
from whoosh.query import *

def test(title, run, reps=10):
  import os
  user_times, wall_times = [], []
  for i in range(reps):
    start = os.times()
    run()
    now = os.times()
    user_times.append(now[0] - start[0])
    wall_times.append(now[4] - start[4])
  mean_user_time = sum(user_times) / float(len(user_times))
  mean_wall_time = sum(wall_times) / float(len(wall_times))
  print "%s : mean user time %0.4f mean wall time %0.4f" % (title, mean_user_time, mean_wall_time)

def parse_query(text):
  if text.startswith(':'):
    i = text.find(' ')
    group_key = text[1:i]
    text = text[i+1:]
    title = "[count by %s] %s" % (group_key, text)
  else:
    group_key = None
    title = "[no counting] %s" % (text)
  return title, eval(text), group_key

def make_search(searcher, query):
  def run():
    searcher.search(query)
  return run

def make_count(searcher, query, field):
  def run():
    facet = whoosh.sorting.FieldFacet(field, maptype=whoosh.sorting.Count)
    searcher.search(query, groupedby=facet)
  return run

def run_tests(searcher, queries, reps):
  for title, query, group_key in queries:
    if group_key is None:
      run = make_search(searcher, query)
    else:
      run = make_count(searcher, query, group_key)
    test(title, run, reps)

if __name__ == '__main__':
  import getopt

  try:
    opts, args = getopt.getopt(sys.argv[1:], "r:")
    if len(args) != 1:
      raise getopt.GetoptError("wrong number of positional arguments")
    opts = dict(opts)
  except getopt.GetoptError:
    print >> sys.stderr, __doc__.strip('\n\r') % (sys.argv[0])
    sys.exit(1)

  num_reps = int(opts['-r'] if '-r' in opts else 10)

  index = whoosh.index.open_dir(args[0])
  queries = [parse_query(t.strip()) for t in sys.stdin]
  with index.searcher() as searcher:
    run_tests(searcher, queries, num_reps)
